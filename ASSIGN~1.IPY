{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a198e34e-16e1-4c03-b0c8-6b6da61df672",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "STUDENT NAME: Joaz Ephraim A. Flores\n",
    "\n",
    "Assignment 2.1 Supplementary Activities to Creating Modules and Packages\n",
    "\n",
    "Perform the following tasks:\n",
    "\n",
    "1. Create a function that would accept two inputs: a sentence(string), and a list containing bad words that the user would like to censor but not remove. The function should return the newly filtered sentence wherein the bad words are replaced with asterisks equal to the length of the censored word.\n",
    "2. Create a quadratic equation solver module that would write the inputs of the user and the corresponding output into text files.\n",
    "\n",
    "Answer the following questions:\n",
    "\n",
    "1. Why do built-in functions exist?\n",
    "2. What are the advantages/disadvantages of placing code inside functions vs. sequential codes?\n",
    "3. What is the different between a function and a module?\n",
    "4. Discuss the difference between a module and a package.\n",
    "\n",
    "Submission Requirements:\n",
    "\n",
    "PDF file of main Python notebook.\n",
    "Link to files in the comments section.\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "0c32d175-924a-4daa-91a2-39844142589e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "---Word Censor---\n",
      "\n",
      "---1. Input words to be censored.---\n",
      "\n",
      "---2. Input your sentence.\n",
      "\n",
      "---3. Exit.---\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Input a number from the options. 1\n",
      "Type a word/s that you want censored. badword\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please input a valid option.\n",
      "\n",
      "---Word Censor---\n",
      "\n",
      "---1. Input words to be censored.---\n",
      "\n",
      "---2. Input your sentence.\n",
      "\n",
      "---3. Exit.---\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Input a number from the options. 2\n",
      "Type your sentence here. I want to say a badword\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I want to say * *******\n",
      "\n",
      "---Word Censor---\n",
      "\n",
      "---1. Input words to be censored.---\n",
      "\n",
      "---2. Input your sentence.\n",
      "\n",
      "---3. Exit.---\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Input a number from the options. 3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Exiting...\n"
     ]
    }
   ],
   "source": [
    "#Word Censorship\n",
    "\"\"\"\n",
    "def word_censor(sentence, bad_words):\n",
    "                \n",
    "    # Split the sentence into words\n",
    "    words = sentence.split()\n",
    "    \n",
    "    # Iterate over the words and check if any are in the bad_words list\n",
    "    for i, word in enumerate(words):\n",
    "            clean_word = word.strip('.,!?')  # Remove punctuation for comparison\n",
    "            if clean_word.lower() in bad_words:\n",
    "                # Replace the bad word with asterisks of the same length\n",
    "                words[i] = word.replace(clean_word, '*' * len(clean_word))\n",
    "    \n",
    "    # Rejoin the words into a censored sentence\n",
    "    return ' '.join(words)\n",
    "        \n",
    "while True:\n",
    "    \n",
    "    print(\"\\n---Word Censor---\")\n",
    "    print(\"\\n---1. Input words to be censored.---\")\n",
    "    print(\"\\n---2. Input your sentence.\")\n",
    "    print(\"\\n---3. Exit.---\")\n",
    "    \n",
    "    choice = input(\"Input a number from the options.\")\n",
    "    \n",
    "    if choice == \"1\":\n",
    "        # Example usage\n",
    "        bad_words = input(\"Type a word/s that you want censored.\")\n",
    "\n",
    "    if choice == \"2\":\n",
    "        sentence = input(\"Type your sentence here.\")\n",
    "        censored = word_censor(sentence, bad_words)\n",
    "        print(censored)\n",
    "\n",
    "    elif choice == \"3\":\n",
    "        print(\"\\nExiting...\")\n",
    "        break\n",
    "    \n",
    "    else:\n",
    "        print(\"Please input a valid option.\")\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "34b1fbc3-3ec2-45c8-95f0-4635ae4b6a98",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--Welcome to the Quadratic Solver.--\n",
      "1. Enter your values.\n",
      "2. Show results.\n",
      "3. Create a file for a copy of your Input and Output.\n",
      "4. Exit Quadratic Solver.\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please enter a number. 1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter your values.\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter coefficient a (a ≠ 0):  8\n",
      "Enter coefficient b:  7\n",
      "Enter coefficient c:  -6\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--Welcome to the Quadratic Solver.--\n",
      "1. Enter your values.\n",
      "2. Show results.\n",
      "3. Create a file for a copy of your Input and Output.\n",
      "4. Exit Quadratic Solver.\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please enter a number. 2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Calculating Results...\n",
      "Two distinct real roots: 0.5327609185162515 and -1.4077609185162516\n",
      "\n",
      "--Welcome to the Quadratic Solver.--\n",
      "1. Enter your values.\n",
      "2. Show results.\n",
      "3. Create a file for a copy of your Input and Output.\n",
      "4. Exit Quadratic Solver.\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please enter a number. 3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating file...\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your file name Joaz Test\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--Welcome to the Quadratic Solver.--\n",
      "1. Enter your values.\n",
      "2. Show results.\n",
      "3. Create a file for a copy of your Input and Output.\n",
      "4. Exit Quadratic Solver.\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please enter a number. 4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Exiting Quadratic Solver...\n"
     ]
    }
   ],
   "source": [
    "#Quadratic Solver\n",
    "\"\"\"\n",
    "import math\n",
    "\n",
    "# Function to solve the quadratic equation\n",
    "def solve_quadratic(a, b, c):\n",
    "    # Calculate discriminant\n",
    "    discriminant = b**2 - 4*a*c\n",
    "\n",
    "    # Check if discriminant is positive, zero or negative\n",
    "    if discriminant > 0:\n",
    "        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n",
    "        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n",
    "        return f\"Two distinct real roots: {root1} and {root2}\"\n",
    "    elif discriminant == 0:\n",
    "        root = -b / (2*a)\n",
    "        return f\"One real root: {root}\"\n",
    "    else:\n",
    "        real_part = -b / (2*a)\n",
    "        imaginary_part = math.sqrt(-discriminant) / (2*a)\n",
    "        return f\"Two complex roots: {real_part} + {imaginary_part}i and {real_part} - {imaginary_part}i\"\n",
    "\n",
    "# Function to write inputs and outputs to text files\n",
    "def write_to_files(a, b, c, result):        \n",
    "    file = open(input(\"Enter your file name\")+\".txt\", \"w\")\n",
    "    file.write(f\"Inputs: a = {a}, b = {b}, c = {c}\\n\")\n",
    "    file.write(f\"Result for a = {a}, b = {b}, c = {c}: {result}\\n\")\n",
    "    file.close()\n",
    "\n",
    "while True:\n",
    "\n",
    "    print(\"\\n--Welcome to the Quadratic Solver.--\")\n",
    "    print(\"1. Enter your values.\")\n",
    "    print(\"2. Show results.\")\n",
    "    print(\"3. Create a file for a copy of your Input and Output.\")\n",
    "    print(\"4. Exit Quadratic Solver.\")\n",
    "\n",
    "    choice = input(\"Please enter a number.\")\n",
    "\n",
    "    if choice == \"1\":\n",
    "        print(\"Please enter your values.\")\n",
    "        # Get coefficients from the user\n",
    "        a = float(input(\"Enter coefficient a (a ≠ 0): \"))\n",
    "        b = float(input(\"Enter coefficient b: \"))\n",
    "        c = float(input(\"Enter coefficient c: \"))\n",
    "\n",
    "    elif choice == \"2\":        \n",
    "        print(\"Calculating Results...\")\n",
    "        # Solve the quadratic equation        \n",
    "        result = solve_quadratic(a, b, c)\n",
    "        # Output the result to the user\n",
    "        print(result)\n",
    "\n",
    "    elif choice == \"3\":        \n",
    "        print(\"Creating file...\")\n",
    "        # Write inputs and result to text files        \n",
    "        write_to_files(a, b, c, result)\n",
    "    \n",
    "    elif choice == \"4\":\n",
    "        print(\"Exiting Quadratic Solver...\")\n",
    "        break\n",
    "    \n",
    "    else:\n",
    "        print(\"Enter a valid number from the choices given.\")\n",
    "\"\"\"        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14d112ab-255b-4863-92b3-ec84ec7e07cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Answer the following questions:\n",
    "\n",
    "1. Why do built-in functions exist?\n",
    "\n",
    "Built in functions exist since there are certain commands that people use a lot over and over again so having built-in functions makes building programs easier and more effecient.\n",
    "\n",
    "2. What are the advantages/disadvantages of placing code inside functions vs. sequential codes?\n",
    "\n",
    "Using functions makes coding much cleaner and effecient. It allows functions to be re used in other parts of the code.\n",
    "Sequential codes are often good for simple codes and better if you are a beginner learning python since you can see all the code.\n",
    "\n",
    "3. What is the different between a function and a module?\n",
    "\n",
    "Functions are commands within a module than can be called on in any part of the module instead of re writing the command in every line.\n",
    "Modules are codes than can be called on using the import function by other modules.\n",
    "\n",
    "4. Discuss the difference between a module and a package.\n",
    "\n",
    "A module is a set of commands that can be imported in other modules and a package is a set of modules.\n",
    "\"\"\""
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
